import { createSlice } from "@reduxjs/toolkit";
import {
  fetchMovies,
  addMovie,
  deleteMovie,
  getMovie,
  getCurrentMovie,
} from "./moviesOperations";

const initialState = {
  data: {
    items: [],
    libraryItems: [],
    loading: false,
    error: null,
    token: null,
  },
  filter: "",
};

const moviesSlice = createSlice({
  name: "contacts",
  initialState,
  reducers: {
    changeFilter: (state, { payload }) => {
      state.filter = payload;
    },
  },
  extraReducers: builder => {
    builder
      // FETCH MOVIES
      .addCase(fetchMovies.pending, state => {
        state.data.loading = true;
        state.data.error = null;
      })
      .addCase(fetchMovies.fulfilled, (state, { payload }) => {
        state.data.loading = false;
        state.data.items = payload;
      })
      .addCase(fetchMovies.rejected, (state, { payload }) => {
        state.data.loading = false;
        state.data.error = payload;
      })

      // GET MOVIE INFO
      .addCase(getMovie.pending, state => {
        state.data.loading = true;
        state.data.error = null;
      })
      .addCase(getMovie.fulfilled, (state, { payload }) => {
        state.data.loading = false;
      })
      .addCase(getMovie.rejected, (state, { payload }) => {
        state.data.loading = false;
        state.data.error = payload;
      })
      .addCase(getCurrentMovie.fulfilled, (state, { payload }) => {
        state.data.loading = false;
      })

      // ADD MOVIE TO LIB
      .addCase(addMovie.pending, state => {
        state.data.loading = true;
        state.data.error = null;
      })
      .addCase(addMovie.fulfilled, (state, { payload }) => {
        state.data.loading = false;
        state.data.libraryItems.push(payload);
      })
      .addCase(addMovie.rejected, (state, { payload }) => {
        state.data.loading = false;
        state.data.error = payload;
      })

      // DELETE MOVIE FROM LIB
      .addCase(deleteMovie.pending, state => {
        state.data.loading = true;
        state.data.error = null;
      })
      .addCase(deleteMovie.fulfilled, (state, { payload }) => {
        state.data.loading = false;
        const indx = state.data.items.findIndex(item => item.id === payload);
        state.data.items.splice(indx, 1);
      })
      .addCase(deleteMovie.rejected, (state, { payload }) => {
        state.data.loading = false;
        state.data.error = payload;
      });
  },
});

export const { changeFilter } = moviesSlice.actions;

export default moviesSlice.reducer;
